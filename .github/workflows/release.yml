name: release
#on: [push, pull_request]
on:
  workflow_dispatch:

env:
  DEVELOPER_DIR: /Applications/Xcode_12.4.app/Contents/Developer
  EMSCRIPTEN_VERSION: 2.0.8

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

  android-opencv4:
    runs-on: ubuntu-latest
    env:
      OPENCV_VERSION: 4.5.4
      PACKAGENAME: opencv-mobile-4.5.4-android
    steps:
    - uses: actions/checkout@v2
    - uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r15c
        add-to-path: false
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' ${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
    - name: fix_toolchain_r15c
      run: |
        wget https://github.com/qiaone/opencv-mobile/releases/download/refs%2Fheads%2Fmaster/android.toolchain.cmake
        cp android.toolchain.cmake /opt/hostedtoolcache/ndk/r15c/x64/build/cmake/android.toolchain.cmake
    - name: opencv-source
      run: |
        #wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        wget -q https://github.com/qiaone/opencv-mobile/releases/download/refs%2Fheads%2Fmaster/opencv-mobile-4.5.4-android.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        truncate -s 0 cmake/OpenCVFindLibsGrfmt.cmake
        rm -rf modules/gapi
        patch -p1 -i ../opencv-4.5.4-no-rtti.patch
        patch -p1 -i ../opencv-4.5.4-no-zlib.patch
        rm -rf modules/highgui
        cp -r ../highgui modules/
    - name: build-armeabi-v7a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64-v8a
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-24 -DANDROID_CPP_FEATURES="no-rtti no-exceptions" \
            -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-x86_64/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-armeabi-v7a/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-${{ env.OPENCV_VERSION }}/build-arm64-v8a/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/sdk/etc
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/*.mk
        rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/android.toolchain.cmake
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  release:
    needs: [setup, android-opencv4]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.setup.outputs.VERSION }}
        release_name: Release ${{ needs.setup.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: upload-android-opencv4
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-4.5.4-android
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip
